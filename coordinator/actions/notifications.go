package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"

	"coordinator/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Notification)
// DB Table: Plural (notifications)
// Resource: Plural (Notifications)
// Path: Plural (/notifications)
// View Template Folder: Plural (/templates/notifications/)

// NotificationsResource is the resource for the Notification model
type NotificationsResource struct {
	buffalo.Resource
}

// List gets all Notifications. This function is mapped to the path
// GET /notifications
func (v NotificationsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	notifications := &models.Notifications{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Notifications from the DB
	if err := q.All(notifications); err != nil {
		return err
	}

	return c.Render(200, r.JSON(notifications))
}

// Show gets the data for one Notification. This function is mapped to
// the path GET /notifications/{notification_id}
func (v NotificationsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Notification
	notification := &models.Notification{}

	// To find the Notification the parameter notification_id is used.
	if err := tx.EagerPreload().Find(notification, c.Param("notification_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(notification))
}

// Create adds a Notification to the DB. This function is mapped to the
// path POST /notifications
func (v NotificationsResource) Create(c buffalo.Context) error {
	// Allocate an empty Notification
	notification := &models.Notification{}

	// Bind notification to the html form elements
	if err := c.Bind(notification); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(notification)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusCreated, r.JSON(notification))
}

// Update changes a Notification in the DB. This function is mapped to
// the path PUT /notifications/{notification_id}
func (v NotificationsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Notification
	notification := &models.Notification{}

	if err := tx.Find(notification, c.Param("notification_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Notification to the html form elements
	if err := c.Bind(notification); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(notification)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusOK, r.JSON(notification))
}

// Destroy deletes a Notification from the DB. This function is mapped
// to the path DELETE /notifications/{notification_id}
func (v NotificationsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Notification
	notification := &models.Notification{}

	// To find the Notification the parameter notification_id is used.
	if err := tx.Find(notification, c.Param("notification_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(notification); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(notification))
}
