package actions

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"

	"coordinator/models"
)

func TicketsActive(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	tickets := &models.Tickets{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	q.EagerPreload()
	q.Where("finished_at is null")
	q.Order("created_at ASC")

	// Retrieve all Tickets from the DB
	if err := q.All(tickets); err != nil {
		return err
	}

	return c.Render(200, r.JSON(tickets))
}

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Ticket)
// DB Table: Plural (tickets)
// Resource: Plural (Tickets)
// Path: Plural (/tickets)
// View Template Folder: Plural (/templates/tickets/)

// TicketsResource is the resource for the Ticket model
type TicketsResource struct {
	buffalo.Resource
}

// List gets all Tickets. This function is mapped to the path
// GET /tickets
func (v TicketsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	tickets := &models.Tickets{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Tickets from the DB
	if err := q.All(tickets); err != nil {
		return err
	}

	return c.Render(200, r.JSON(tickets))
}

// Show gets the data for one Ticket. This function is mapped to
// the path GET /tickets/{ticket_id}
func (v TicketsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Ticket
	ticket := &models.Ticket{}

	// To find the Ticket the parameter ticket_id is used.
	if err := tx.EagerPreload().Find(ticket, c.Param("ticket_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(ticket))
}

// Create adds a Ticket to the DB. This function is mapped to the
// path POST /tickets
func (v TicketsResource) Create(c buffalo.Context) error {
	// Allocate an empty Ticket
	ticket := &models.Ticket{}

	// Bind ticket to the html form elements
	if err := c.Bind(ticket); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	ticket.CreatedAt = time.Now()
	ticket.ExpiresAt = time.Now().Add(time.Hour * 168)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(ticket)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusCreated, r.JSON(ticket))
}

// Update changes a Ticket in the DB. This function is mapped to
// the path PUT /tickets/{ticket_id}
func (v TicketsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Ticket
	ticket := &models.Ticket{}

	if err := tx.Find(ticket, c.Param("ticket_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Ticket to the html form elements
	if err := c.Bind(ticket); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(ticket)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusOK, r.JSON(ticket))
}

// Destroy deletes a Ticket from the DB. This function is mapped
// to the path DELETE /tickets/{ticket_id}
func (v TicketsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Ticket
	ticket := &models.Ticket{}

	// To find the Ticket the parameter ticket_id is used.
	if err := tx.Find(ticket, c.Param("ticket_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(ticket); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(ticket))
}
