package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"

	"coordinator/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Area)
// DB Table: Plural (areas)
// Resource: Plural (Areas)
// Path: Plural (/areas)
// View Template Folder: Plural (/templates/areas/)

// AreasResource is the resource for the Area model
type AreasResource struct {
	buffalo.Resource
}

// List gets all Areas. This function is mapped to the path
// GET /areas
func (v AreasResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	areas := &models.Areas{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Areas from the DB
	if err := q.All(areas); err != nil {
		return err
	}

	return c.Render(200, r.JSON(areas))
}

// Show gets the data for one Area. This function is mapped to
// the path GET /areas/{area_id}
func (v AreasResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Area
	area := &models.Area{}

	// To find the Area the parameter area_id is used.
	if err := tx.EagerPreload().Find(area, c.Param("area_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(area))
}

// Create adds a Area to the DB. This function is mapped to the
// path POST /areas
func (v AreasResource) Create(c buffalo.Context) error {
	// Allocate an empty Area
	area := &models.Area{}

	// Bind area to the html form elements
	if err := c.Bind(area); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(area)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusCreated, r.JSON(area))
}

// Update changes a Area in the DB. This function is mapped to
// the path PUT /areas/{area_id}
func (v AreasResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Area
	area := &models.Area{}

	if err := tx.Find(area, c.Param("area_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Area to the html form elements
	if err := c.Bind(area); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(area)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusOK, r.JSON(area))
}

// Destroy deletes a Area from the DB. This function is mapped
// to the path DELETE /areas/{area_id}
func (v AreasResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Area
	area := &models.Area{}

	// To find the Area the parameter area_id is used.
	if err := tx.Find(area, c.Param("area_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(area); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(area))
}
